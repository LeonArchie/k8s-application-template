# SPDX-License-Identifier: AGPL-3.0-only WITH LICENSE-ADDITIONAL
# Copyright (C) 2025 Петунин Лев Михайлович

# Импорт необходимых модулей
from flask import Blueprint, jsonify
import logging

# Импорт для проверки БД
from maintenance.database_connector import is_database_initialized

# Создаем логгер для текущего модуля
logger = logging.getLogger(__name__)

# Создаем Blueprint для healthcheck-эндпоинтов
healthz_bp = Blueprint('healthz', __name__)

def _check_database_connection():
    """
    Проверка подключения к базе данных
    """
    try:
        if is_database_initialized():
            return True
        else:
            return False
    except Exception as e:
        logger.error(f"Ошибка проверки подключения к БД: {e}")
        return False, f"Database connection error: {str(e)}"

# Декорируем функцию для обработки GET-запросов по пути '/healthz'
@healthz_bp.route('/healthz', methods=['GET'])
def healthz():
    logger.debug("Проверка работоспособности сервиса")

    # Проверяем подключение к БД
    db_ready = _check_database_connection()
    
    # Формируем ответ
    if db_ready:
        response_data = {"status": True}
        return jsonify(response_data), 200
    else:
        response_data = {"status": False}
        return jsonify(response_data), 503

# Примечания:
# 1. Этот эндпоинт проверяет "живость" сервиса (liveness)
# 2. В отличие от /readyz, здесь проверяются базовые показатели здоровья
# 3. Kubernetes перезапускает контейнер если /healthz возвращает ошибку
# 4. Проверки должны быть легковесными и быстрыми

# Примечания:
# 1. Этот эндпоинт проверяет "живость" сервиса (liveness)
# 2. В отличие от /readyz, здесь проверяются базовые показатели здоровья
# 3. Kubernetes перезапускает контейнер если /healthz возвращает ошибку
# 4. Проверки должны быть легковесными и быстрыми
# Основные принципы работы этого endpoint:
#
# 1. Отличие от /healthz:
#    - /healthz проверяет "живость" сервиса (liveness)
#    - /readyz проверяет готовность обрабатывать запросы (readiness)
#
# 2. Типичные сценарии использования:
#    - Kubernetes использует для управления подами трафика
#    - Балансировщики нагрузки для исключения/включения нод
#    - В оркестраторах при rolling updates
#
# 3. Проверки готовности:
#    - Сервис конфигураций (внешняя зависимость)
#    - База данных (критическая внутренняя зависимость)
#    - Другие внешние сервисы при необходимости
#
# 4. Оптимизации:
#    - Минимизировать внешние зависимости проверок
#    - Кэшировать результаты, если проверки ресурсоемкие
#    - Добавлять timeout для внешних проверок
#
# 5. Безопасность:
#    - Не должен раскрывать sensitive-информацию
#    - Можно добавить базовую аутентификацию
#    - Рекомендуется закрыть от публичного доступа

# Примечания:
# 1. Этот эндпоинт должен быть максимально простым и быстрым, так как:
#    - Он часто вызывается системами мониторинга (Kubernetes, Docker и др.)
#    - Не должен зависеть от других сервисов (это проверка именно этого сервиса)
# 2. В продакшне можно добавить проверки:
#    - Доступности базы данных
#    - Наличия свободного места на диске
#    - Доступности других критичных ресурсов
# 3. Логирование помогает отслеживать частоту проверок и выявлять проблемы